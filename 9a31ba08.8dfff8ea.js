(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{104:function(e,t,a){"use strict";a.d(t,"a",(function(){return b}));var n=a(0),i=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),b=n,h=d["".concat(o,".").concat(b)]||d[b]||u[b]||r;return a?i.a.createElement(h,s(s({ref:t},c),{},{components:a})):i.a.createElement(h,s({ref:t},c))}));function b(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},81:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return p}));var n=a(2),i=a(6),r=(a(0),a(104)),o={id:"authentication",title:"Authentication",sidebar_label:"Authentication"},s={unversionedId:"development/authentication",id:"development/authentication",isDocsHomePage:!1,title:"Authentication",description:"We mainly use json web token to verify our user. This is very efficient in handling multi-device(phone, tablet, pc) users.",source:"@site/docs/development/authentication.md",permalink:"/docs/development/authentication",sidebar_label:"Authentication",sidebar:"docs",previous:{title:"Design",permalink:"/docs/development/design"},next:{title:"Features",permalink:"/docs/development/features"}},l=[{value:"Resolvers",id:"resolvers",children:[{value:"Mutations",id:"mutations",children:[]},{value:"Queries",id:"queries",children:[]},{value:"Protecting our queries",id:"protecting-our-queries",children:[]}]}],c={rightToc:l};function p(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(r.a)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.a)("p",null,"We mainly use ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"https://jwt.io"}),"json web token")," to verify our user. This is very efficient in handling multi-device(phone, tablet, pc) users."),Object(r.a)("h2",{id:"resolvers"},"Resolvers"),Object(r.a)("h3",{id:"mutations"},"Mutations"),Object(r.a)("p",null,"Below are the mutations you can find in our development server."),Object(r.a)("h4",{id:"register-user"},"Register user"),Object(r.a)("p",null,"You can use the ",Object(r.a)("inlineCode",{parentName:"p"},"signUp")," mutation to register users to ",Object(r.a)("inlineCode",{parentName:"p"},"HackaTalk")," and get user info. Note that the token is not delivered directly just by the ",Object(r.a)("inlineCode",{parentName:"p"},"signUp")," mutation. Users need to ",Object(r.a)("inlineCode",{parentName:"p"},"sign in")," in order to achieve the ",Object(r.a)("inlineCode",{parentName:"p"},"jwt token"),"."),Object(r.a)("h4",{id:"sign-in-user"},"Sign in user"),Object(r.a)("p",null,"Users sign in into ",Object(r.a)("inlineCode",{parentName:"p"},"HackaTalk")," and this returns ",Object(r.a)("inlineCode",{parentName:"p"},"AuthPayload")," which we've defined. This returns a ",Object(r.a)("inlineCode",{parentName:"p"},"user")," and ",Object(r.a)("inlineCode",{parentName:"p"},"token")," field. Put the ",Object(r.a)("inlineCode",{parentName:"p"},"token")," into the ",Object(r.a)("inlineCode",{parentName:"p"},"header")," as below so that the server knows the user is signed in. "),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{}),'{\n   "authorization: "{returned_user_token}"\n}\n')),Object(r.a)("p",null,"There are 2 types of ways to sign in."),Object(r.a)("ol",null,Object(r.a)("li",{parentName:"ol"},Object(r.a)("p",{parentName:"li"},"Sign in with email"),Object(r.a)("p",{parentName:"li"},Object(r.a)("inlineCode",{parentName:"p"},"signInEmail")," mutation lets users of ",Object(r.a)("inlineCode",{parentName:"p"},"HackaTalk")," sign in with an ",Object(r.a)("inlineCode",{parentName:"p"},"email")," and ",Object(r.a)("inlineCode",{parentName:"p"},"password"),". However, if the ",Object(r.a)("inlineCode",{parentName:"p"},"user"),"'s email is not ",Object(r.a)("inlineCode",{parentName:"p"},"verified"),", the client's app will direct users to their verify email. In this case, you should ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"#verify-email"}),"verify user's email"),".")),Object(r.a)("li",{parentName:"ol"},Object(r.a)("p",{parentName:"li"},"Sign in with a social account"),Object(r.a)("p",{parentName:"li"},"We provide a social account sign-in. We are currently supporting below."),Object(r.a)("ul",{parentName:"li"},Object(r.a)("li",{parentName:"ul"},"Facebook - ",Object(r.a)("inlineCode",{parentName:"li"},"signInWithFacebook")),Object(r.a)("li",{parentName:"ul"},"Apple - ",Object(r.a)("inlineCode",{parentName:"li"},"signInWithApple")),Object(r.a)("li",{parentName:"ul"},"Google - ",Object(r.a)("inlineCode",{parentName:"li"},"signInWithGoogle"))),Object(r.a)("blockquote",{parentName:"li"},Object(r.a)("p",{parentName:"blockquote"},"We are not providing any ",Object(r.a)("inlineCode",{parentName:"p"},"redirect")," url approach like in ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow"}),"facebook login flow"),". Social authentication providers redirect the url after user's authentication completes. If we use this approach in ",Object(r.a)("inlineCode",{parentName:"p"},"HackaTalk"),", we should have to open up a new browser for mobile applications. We don't like this workflow so instead , we will we require each client to receive a social provider's ",Object(r.a)("inlineCode",{parentName:"p"},"access_token")," by themselves and then send a request to our server with that ",Object(r.a)("inlineCode",{parentName:"p"},"access_token"),". Our ",Object(r.a)("inlineCode",{parentName:"p"},"schema")," is designed as below.")),Object(r.a)("pre",{parentName:"li"},Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"signInWithFacebook(accessToken: String!): AuthPayload!\nsignInWithApple(accessToken: String!): AuthPayload!\nsignInWithGoogle(accessToken: String!): AuthPayload!\n")),Object(r.a)("p",{parentName:"li"},"We used ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"https://docs.expo.io/versions/latest/sdk/auth-session"}),"expo-auth-session")," for ",Object(r.a)("inlineCode",{parentName:"p"},"facebook")," and ",Object(r.a)("inlineCode",{parentName:"p"},"google")," sign in to support all platforms in one codebase. This has been provided by ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"https://expo.io"}),"expo")," by ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"https://twitter.com/baconbrix/status/1256985914749759488"}),"Evan Bacon in twitter"),". However, we still use ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"https://docs.expo.io/versions/latest/sdk/apple-authentication"}),"expo-apple-authentication")," for ",Object(r.a)("inlineCode",{parentName:"p"},"apple")," because providing this on server-side makes hands dirty currently refered to ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/ananay/apple-auth"}),"apple-auth"),". Therefore we decide to provide Apple signin only in ",Object(r.a)("inlineCode",{parentName:"p"},"iOS")," (AUG-02-2020)."))),Object(r.a)("h4",{id:"verify-email"},"Verify email"),Object(r.a)("p",null,"   We are verifying user's email with the ",Object(r.a)("inlineCode",{parentName:"p"},"sendVerification")," mutation. By using this mutation query, we'll send our email to customer via ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"https://sendgrid.com"}),"SendGrid")," api. We are not using ",Object(r.a)("inlineCode",{parentName:"p"},"gmail")," in this case since it has limitations."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"sendVerification(email: String!): Boolean!\n")),Object(r.a)("h4",{id:"resetting-password"},"Resetting password"),Object(r.a)("p",null,"   Users may not remember his or her password. In this case, we will provide a query to reset their password via the link sent to user's email address."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"findPassword(email: String!): Boolean!\n")),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},"We wish to omit multiple requests from the same client. Maybe max 3 times per minutes would be good first step.")),Object(r.a)("h4",{id:"change-password"},"Change password"),Object(r.a)("p",null,"   Users can change their password only if the user is signed in. This should be done somewhere in client's user profile page."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"changeEmailPassword(password: String!, newPassword: String!): Boolean!\n")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Note that our queries are protected by ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"#graphql-shield"}),"graphql-shield")," which we use as a middleware.")),Object(r.a)("h3",{id:"queries"},"Queries"),Object(r.a)("h4",{id:"query-users-own-profile"},"Query user's own profile"),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"me: User!\n")),Object(r.a)("p",null,"   ",Object(r.a)("inlineCode",{parentName:"p"},"me")," query is used mostly for ",Object(r.a)("inlineCode",{parentName:"p"},"authentication")," like when the user is signed in after app finishes loading. If the correct user's ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"https://jwt.io"}),"jwt token")," is not provided, it will return an error and the ",Object(r.a)("inlineCode",{parentName:"p"},"client's")," request will fail. This is how the client knows that the user is signed in. Therefore, this query does not need any extra input arguments."),Object(r.a)("h3",{id:"protecting-our-queries"},"Protecting our queries"),Object(r.a)("h4",{id:"graphql-shield"},"Graphql Shield"),Object(r.a)("p",null,"The ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/maticzav/graphql-shield"}),"graphql-shield")," is wonderful permission management library which can be used in ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/prisma-labs/graphql-middleware"}),"graphql-middlewares"),"."),Object(r.a)("p",null,"This is somewhat similar to ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"https://firebase.google.com/docs/rules"}),"firebase security rules")," in some sense that it protects queries logically. This is defined in ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/dooboolab/hackatalk/blob/master/server/src/permissions/index.ts"}),"permissions/index.ts")," file in our ",Object(r.a)("inlineCode",{parentName:"p"},"server"),"."))}p.isMDXComponent=!0}}]);