(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{104:function(e,t,a){"use strict";a.d(t,"a",(function(){return d}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),h=p(a),d=n,b=h["".concat(l,".").concat(d)]||h[d]||u[d]||i;return a?r.a.createElement(b,o(o({ref:t},s),{},{components:a})):r.a.createElement(b,o({ref:t},s))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"},77:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(6),i=(a(0),a(104)),l={id:"features",title:"Features",sidebar_label:"Features"},o={unversionedId:"development/features",id:"development/features",isDocsHomePage:!1,title:"Features",description:"Features mainly describes what services we provide to HackaTalk users. We generally provide one-to-one as well as group chats. We would like to provide and try out things that can be done with a modern chat app.",source:"@site/docs/development/features.md",permalink:"/docs/development/features",sidebar_label:"Features",sidebar:"docs",previous:{title:"Authentication",permalink:"/docs/development/authentication"},next:{title:"Pagination",permalink:"/docs/development/pagination"}},c=[{value:"Creating Channel",id:"creating-channel",children:[{value:"Updating or deleting Channel",id:"updating-or-deleting-channel",children:[]}]},{value:"Adding friends to your chat app",id:"adding-friends-to-your-chat-app",children:[]},{value:"Start messaging",id:"start-messaging",children:[]}],s={rightToc:c};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.a)("p",null,"Features mainly describes what services we provide to ",Object(i.a)("inlineCode",{parentName:"p"},"HackaTalk")," users. We generally provide ",Object(i.a)("strong",{parentName:"p"},"one-to-one")," as well as ",Object(i.a)("strong",{parentName:"p"},"group")," chats. We would like to provide and try out things that can be done with a modern chat app."),Object(i.a)("h2",{id:"creating-channel"},"Creating Channel"),Object(i.a)("img",{src:"https://user-images.githubusercontent.com/27461460/89128311-d875cf00-d52f-11ea-9107-2ee2e6fe2e58.png",width:"200"}),Object(i.a)("p",null,"Creating a ",Object(i.a)("inlineCode",{parentName:"p"},"channel")," is creating a ",Object(i.a)("inlineCode",{parentName:"p"},"chatroom"),". If the user creates the channel manually selecting other users they wish to chat with, this will be a ",Object(i.a)("strong",{parentName:"p"},"private")," channel as well as ",Object(i.a)("inlineCode",{parentName:"p"},"1-1 chat"),". We have another channel type ",Object(i.a)("strong",{parentName:"p"},"public")," and this is used for public messaging. To create a ",Object(i.a)("strong",{parentName:"p"},"public")," channel, users will type in the ",Object(i.a)("inlineCode",{parentName:"p"},"name")," of channel and get an unique id for that ",Object(i.a)("strong",{parentName:"p"},"channel"),". Then the user can invite other users to the ",Object(i.a)("strong",{parentName:"p"},"public")," channel with that unique id. Below are 3 general senarios listed. "),Object(i.a)("br",null),Object(i.a)("pre",null,Object(i.a)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"createChannel(channel: ChannelCreateInput): Channel\n")),Object(i.a)("ol",null,Object(i.a)("li",{parentName:"ol"},"1-1 private chat",Object(i.a)("ul",{parentName:"li"},Object(i.a)("li",{parentName:"ul"},"Users select one user when creating ",Object(i.a)("inlineCode",{parentName:"li"},"Channel"),"."))),Object(i.a)("li",{parentName:"ol"},"M-M private chat",Object(i.a)("ul",{parentName:"li"},Object(i.a)("li",{parentName:"ul"},"Users create a channel with multiple users.",Object(i.a)("blockquote",{parentName:"li"},Object(i.a)("p",{parentName:"blockquote"},"Note that the private channel will not be created again if the same list of users already exists in the ",Object(i.a)("inlineCode",{parentName:"p"},"Channel"),"."))))),Object(i.a)("li",{parentName:"ol"},"M-M public chat",Object(i.a)("ul",{parentName:"li"},Object(i.a)("li",{parentName:"ul"},"Users create a channel with only the name of channel and recieve a unique id.",Object(i.a)("blockquote",{parentName:"li"},Object(i.a)("p",{parentName:"blockquote"},"Note that this can be duplicated (name, list of users ...).")))))),Object(i.a)("br",null),"A `Membership` is a [single table inheritance](https://en.wikipedia.org/wiki/Single_Table_Inheritance) where `Users` manage the alert mode and `Owner` of the chatroom manages user\u2019s role. The `User` that creates a `Channel` is the `Owner`. The `owner` manages the `role` of each user in the `Channel` as well as the `alertMode`. The `alertMode` allows you to `mute` specific channel or change the sound mode to `vibrate`. Individual users can also manage the ownership. Their relationship as in [RDBMS](https://techterms.com/definition/rdbms) looks like below.",Object(i.a)("img",{src:"https://user-images.githubusercontent.com/27461460/89128370-3b676600-d530-11ea-9c10-e2d133fed021.png",width:"400"}),Object(i.a)("br",null),Object(i.a)("h3",{id:"updating-or-deleting-channel"},"Updating or deleting Channel"),Object(i.a)("p",null,"Only the ",Object(i.a)("inlineCode",{parentName:"p"},"Role")," with the ",Object(i.a)("inlineCode",{parentName:"p"},"owner")," can update the channels. We follow the ",Object(i.a)("a",Object(n.a)({parentName:"p"},{href:"https://guides.cfwheels.org/docs/soft-delete"}),"soft delete")," senario for main models which are ",Object(i.a)("inlineCode",{parentName:"p"},"User")," and ",Object(i.a)("inlineCode",{parentName:"p"},"Channel"),". Other sub models that can be refered as ",Object(i.a)("inlineCode",{parentName:"p"},"cascade")," will not follow the ",Object(i.a)("inlineCode",{parentName:"p"},"soft deletion"),".",Object(i.a)("br",null)),Object(i.a)("h2",{id:"adding-friends-to-your-chat-app"},"Adding friends to your chat app"),Object(i.a)("p",null,Object(i.a)("inlineCode",{parentName:"p"},"HacakTalk")," allows users to search all users who've signed up."),Object(i.a)("img",{src:"https://user-images.githubusercontent.com/27461460/89128315-dad82900-d52f-11ea-9e1b-5a5fd4f29010.png",width:"200"}),Object(i.a)("p",null,"From above screen which is ",Object(i.a)("inlineCode",{parentName:"p"},"SearchUser"),", you can add user to the friend list or chat directly."),Object(i.a)("h2",{id:"start-messaging"},"Start messaging"),Object(i.a)("img",{src:"https://user-images.githubusercontent.com/27461460/89128308-d6ac0b80-d52f-11ea-9368-ebe6e7cb9d15.png",width:"200"}),Object(i.a)("p",null,"When a user tries to chat with a new user but the ",Object(i.a)("inlineCode",{parentName:"p"},"Channel")," doesn't exist, it will automatically create one internally. This flow follows the ",Object(i.a)("a",Object(n.a)({parentName:"p"},{href:"#creating-channel"}),"Creating channel")," flow described above."),Object(i.a)("p",null,"Currently we provide 3 types of messages."),Object(i.a)("ol",null,Object(i.a)("li",{parentName:"ol"},"Text"),Object(i.a)("li",{parentName:"ol"},"Photo"),Object(i.a)("li",{parentName:"ol"},"File")))}p.isMDXComponent=!0}}]);