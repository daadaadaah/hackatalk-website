(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{104:function(e,n,a){"use strict";a.d(n,"a",(function(){return d}));var t=a(0),i=a.n(t);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function c(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=i.a.createContext({}),p=function(e){var n=i.a.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},h={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},u=i.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,r=e.originalType,s=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),u=p(a),d=t,m=u["".concat(s,".").concat(d)]||u[d]||h[d]||r;return a?i.a.createElement(m,l(l({ref:n},o),{},{components:a})):i.a.createElement(m,l({ref:n},o))}));function d(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=a.length,s=new Array(r);s[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:t,s[1]=l;for(var o=2;o<r;o++)s[o]=a[o];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},88:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return s})),a.d(n,"metadata",(function(){return l})),a.d(n,"rightToc",(function(){return c})),a.d(n,"default",(function(){return p}));var t=a(2),i=a(6),r=(a(0),a(104)),s={id:"channel",title:"Channel",sidebar_label:"Channel"},l={unversionedId:"server/channel",id:"server/channel",isDocsHomePage:!1,title:"Channel",description:"Channel(aka Chatroom) is an important concept when building chat apps. Channel can aggregate users and make them prepare chattings. There can exist many relational models in-between User and Channel. This way makes life easier for a developer who wants to add complex business logic in their chat application.",source:"@site/docs/server/channel.md",permalink:"/docs/server/channel",sidebar_label:"Channel",sidebar:"docs",previous:{title:"Specification",permalink:"/docs/server/specification"},next:{title:"Membership",permalink:"/docs/server/membership"}},c=[{value:"Entity Design",id:"entity-design",children:[]},{value:"Creating channel",id:"creating-channel",children:[]},{value:"Creating channel with message",id:"creating-channel-with-message",children:[]},{value:"Types of channel",id:"types-of-channel",children:[]},{value:"Leaving the channel",id:"leaving-the-channel",children:[]},{value:"Current status",id:"current-status",children:[]}],o={rightToc:c};function p(e){var n=e.components,a=Object(i.a)(e,["components"]);return Object(r.a)("wrapper",Object(t.a)({},o,a,{components:n,mdxType:"MDXLayout"}),Object(r.a)("p",null,Object(r.a)("inlineCode",{parentName:"p"},"Channel"),"(aka ",Object(r.a)("inlineCode",{parentName:"p"},"Chatroom"),") is an important concept when building chat apps. ",Object(r.a)("inlineCode",{parentName:"p"},"Channel")," can aggregate users and make them prepare chattings. There can exist many relational models in-between ",Object(r.a)("inlineCode",{parentName:"p"},"User")," and ",Object(r.a)("inlineCode",{parentName:"p"},"Channel"),". This way makes life easier for a developer who wants to add complex business logic in their chat application."),Object(r.a)("p",null,"Say you want to make the user grant permission to other users in the ",Object(r.a)("inlineCode",{parentName:"p"},"Channel"),", then we can create ",Object(r.a)("inlineCode",{parentName:"p"},"Membership")," relation in between. Another scenario is when the user wants to manage the sound(vibrate, silent, etc) of each channel, we can create ",Object(r.a)("inlineCode",{parentName:"p"},"Sound")," relation. Like so, we can add more relations in between to handle more complex logic."),Object(r.a)("p",null,"Currently, we've managed to have the above scenario in one relation which is ",Object(r.a)("inlineCode",{parentName:"p"},"Membership"),". "),Object(r.a)("h2",{id:"entity-design"},"Entity Design"),Object(r.a)("img",{src:"https://user-images.githubusercontent.com/27461460/88914167-2de67d80-d29d-11ea-8230-6762a4cfe1b4.png",width:"400"}),Object(r.a)("p",null,"The decision was made in our first proposal in designing ",Object(r.a)("a",Object(t.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model"}),"Entity Relation Model"),"."),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},"Note that the above ",Object(r.a)("a",Object(t.a)({parentName:"li"},{href:"https://creately.com/blog/diagrams/uml-diagram-types-examples"}),"UML")," diagram is not recent and this is keep\nchanging as we continue implementing cool features.")),Object(r.a)("p",null,"As you can see in the ",Object(r.a)("inlineCode",{parentName:"p"},"image"),", there are ",Object(r.a)("inlineCode",{parentName:"p"},"userAlert"),", ",Object(r.a)("inlineCode",{parentName:"p"},"userMode")," as well as ",Object(r.a)("inlineCode",{parentName:"p"},"type")," of membership which determines what type of permissions user has in the ",Object(r.a)("inlineCode",{parentName:"p"},"Channel"),". We usually call this a ",Object(r.a)("a",Object(t.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Single_Table_Inheritance"}),"single table inheritance")," which many models exist in a table. Therefore, we are writing this so that the contributors won't get confused."),Object(r.a)("h2",{id:"creating-channel"},"Creating channel"),Object(r.a)("p",null,"Many developers may have tried similar implementations since there are millions of chat apps around the world. This is however not that simple when creating a channel with a unique number of users."),Object(r.a)("p",null,"In most ",Object(r.a)("a",Object(t.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Object-relational_mapping"}),"ORM"),", they have the ",Object(r.a)("a",Object(t.a)({parentName:"p"},{href:"https://stackoverflow.com/questions/42719750/sequelize-relation-with-where-in-array?rq=1"}),"in operator as in stackoverflow"),"."),Object(r.a)("p",null,"Developers usually use this to find if subarray matches the query. This is also possible with ",Object(r.a)("a",Object(t.a)({parentName:"p"},{href:"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/filtering#filter-on-related-records"}),"prisma filtering")," in a similar way. However, ",Object(r.a)("inlineCode",{parentName:"p"},"in")," operator will return all the rows of the query when the subarray matches."),Object(r.a)("img",{src:"https://user-images.githubusercontent.com/27461460/90379570-da09d000-e0b5-11ea-8215-df2828108b58.png",width:"200"}),Object(r.a)("p",null,"As in the image, when you query for users of ",Object(r.a)("inlineCode",{parentName:"p"},"tom")," and ",Object(r.a)("inlineCode",{parentName:"p"},"jerry"),", it will search all other arrays in which subarray exists. A similar discussion could be found on ",Object(r.a)("a",Object(t.a)({parentName:"p"},{href:"https://v1.prisma.io/forum/t/query-for-exact-match-of-array-of-ids/5700/17"}),"Prisma1 forum"),"."),Object(r.a)("p",null,"We resolved above problem by checking its length. Currently, we'd also want to find out any better solution over the below code."),Object(r.a)("pre",null,Object(r.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const findChannelWithUserIds = async () => {\n  const channels = await ctx.prisma.channel.findMany({\n    include: {\n      membership: {\n        select: {\n          userId: true,\n          membershipType: true,\n        },\n      },\n    },\n    where: {\n      membership: {\n        every: {\n          userId: { in: [userId, ...userIds] },\n        },\n      },\n    },\n  });\n\n  const totalUsers = userIds.length + 1; // +1 for auth user\n\n  let existingChannel: Channel;\n\n  for (const channel of channels) {\n    if (totalUsers === channel.membership.length) {\n      existingChannel = channel;\n      break;\n    }\n  }\n\n  return existingChannel;\n};\n\nconst existingChannel = await findChannelWithUserIds();\n")),Object(r.a)("p",null,"Therefore, we could manage the ",Object(r.a)("inlineCode",{parentName:"p"},"unique")," channel with unique array of userIds."),Object(r.a)("h2",{id:"creating-channel-with-message"},"Creating channel with message"),Object(r.a)("p",null,"It is also possible to create channel with the message."),Object(r.a)("pre",null,Object(r.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"message && await createMessage(message, existingChannel.id);\n")),Object(r.a)("p",null,"We check if the message argument is not null then call ",Object(r.a)("inlineCode",{parentName:"p"},"createMessage"),"."),Object(r.a)("pre",null,Object(r.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const createMessage = (\n  { text, messageType = MessageType.text, fileUrls = [], imageUrls = [] } : Message,\n  channelId: string,\n) => ctx.prisma.message.create({\n  data: {\n    text,\n    messageType,\n    fileUrls: { set: fileUrls },\n    imageUrls: { set: imageUrls },\n    channel: { connect: { id: channelId } },\n    sender: { connect: { id: userId } },\n  },\n});\n")),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},"Currently, we are facing issues in redefining types if ",Object(r.a)("inlineCode",{parentName:"li"},"Message")," since we can't get it from anywhere (08/17/2020).")),Object(r.a)("h2",{id:"types-of-channel"},"Types of channel"),Object(r.a)("p",null,"There are two types of channel defined in ",Object(r.a)("inlineCode",{parentName:"p"},"ChannelType")," which are ",Object(r.a)("strong",{parentName:"p"},"private")," and ",Object(r.a)("strong",{parentName:"p"},"public"),"."),Object(r.a)("p",null,"The ",Object(r.a)("strong",{parentName:"p"},"public")," channel can have a duplicate array of ",Object(r.a)("inlineCode",{parentName:"p"},"users")," and they can be created continuously while the ",Object(r.a)("strong",{parentName:"p"},"private")," channel needs unique users."),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},"By passing array of ",Object(r.a)("inlineCode",{parentName:"li"},"userIds")," in ",Object(r.a)("inlineCode",{parentName:"li"},"ChannelCreateInput"),", users will grant the ",Object(r.a)("inlineCode",{parentName:"li"},"Permission")," to newly created channel. If the channel is ",Object(r.a)("strong",{parentName:"li"},"public"),", there will be a different ",Object(r.a)("inlineCode",{parentName:"li"},"permissionType")," for each user and one of them will grant a ",Object(r.a)("inlineCode",{parentName:"li"},"owner")," permission.")),Object(r.a)("h2",{id:"leaving-the-channel"},"Leaving the channel"),Object(r.a)("p",null,"The ",Object(r.a)("inlineCode",{parentName:"p"},"isVisible")," field exists in ",Object(r.a)("inlineCode",{parentName:"p"},"Membership")," model for ",Object(r.a)("strong",{parentName:"p"},"private")," channel when the user wants to leave the channel. It will be set to ",Object(r.a)("inlineCode",{parentName:"p"},"false")," and this will affect ",Object(r.a)("inlineCode",{parentName:"p"},"myChannels")," query results and will be hidden when the user wants to fetch his or her channels."),Object(r.a)("p",null,"However, ",Object(r.a)("inlineCode",{parentName:"p"},"hidden")," channel will automatically be ",Object(r.a)("inlineCode",{parentName:"p"},"visible")," when new ",Object(r.a)("strong",{parentName:"p"},"message")," has been created and this is defined in ",Object(r.a)("inlineCode",{parentName:"p"},"changeVisibilityWhenInvisible")," function."),Object(r.a)("pre",null,Object(r.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const changeVisibilityWhenInvisible = () => ctx.prisma.membership.update({\n  data: { isVisible: true },\n  where: {\n    userId_channelId: {\n      userId,\n      channelId: existingChannel.id,\n    },\n  },\n});\n")),Object(r.a)("h2",{id:"current-status"},"Current status"),Object(r.a)("h4",{id:"08172020"},"08/17/2020"),Object(r.a)("p",null,"In our mobile application, we only have ",Object(r.a)("strong",{parentName:"p"},"private")," channel senario and the ",Object(r.a)("strong",{parentName:"p"},"public")," channel senario will be updated in future when things go well. The ",Object(r.a)("strong",{parentName:"p"},"public")," channel will be any kinds of group chats except the ",Object(r.a)("a",Object(t.a)({parentName:"p"},{href:"https://slack.com/intl/en-kr/help/articles/212281468-What-is-a-direct-message"}),"direct messages in slack"),"."))}p.isMDXComponent=!0}}]);